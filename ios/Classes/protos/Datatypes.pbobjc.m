// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Datatypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DatatypesRoot

@implementation DatatypesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum CodecDataType

GPBEnumDescriptor *CodecDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Zero\000AblyMessage\000ClientOptions\000TokenDeta"
        "ils\000ErrorInfo\000ConnectionEvent\000Connection"
        "State\000ConnectionStateChange\000ChannelEvent"
        "\000ChannelState\000ChannelStateChange\000";
    static const int32_t values[] = {
        CodecDataType_Zero,
        CodecDataType_AblyMessage,
        CodecDataType_ClientOptions,
        CodecDataType_TokenDetails,
        CodecDataType_ErrorInfo,
        CodecDataType_ConnectionEvent,
        CodecDataType_ConnectionState,
        CodecDataType_ConnectionStateChange,
        CodecDataType_ChannelEvent,
        CodecDataType_ChannelState,
        CodecDataType_ChannelStateChange,
    };
    static const char *extraTextFormatInfo = "\001\000\200\344\200\200\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CodecDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CodecDataType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CodecDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CodecDataType_Zero:
    case CodecDataType_AblyMessage:
    case CodecDataType_ClientOptions:
    case CodecDataType_TokenDetails:
    case CodecDataType_ErrorInfo:
    case CodecDataType_ConnectionEvent:
    case CodecDataType_ConnectionState:
    case CodecDataType_ConnectionStateChange:
    case CodecDataType_ChannelEvent:
    case CodecDataType_ChannelState:
    case CodecDataType_ChannelStateChange:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
