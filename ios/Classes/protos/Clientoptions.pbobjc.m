// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientoptions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Clientoptions.pbobjc.h"
#import "Token.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClientoptionsRoot

@implementation ClientoptionsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClientoptionsRoot_FileDescriptor

static GPBFileDescriptor *ClientoptionsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum HTTPMethods

GPBEnumDescriptor *HTTPMethods_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Post\000Get\000";
    static const int32_t values[] = {
        HTTPMethods_Post,
        HTTPMethods_Get,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HTTPMethods)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HTTPMethods_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HTTPMethods_IsValidValue(int32_t value__) {
  switch (value__) {
    case HTTPMethods_Post:
    case HTTPMethods_Get:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ClientOptions

@implementation ClientOptions

@dynamic authURL;
@dynamic authMethod;
@dynamic key;
@dynamic hasTokenDetails, tokenDetails;
@dynamic authHeaders, authHeaders_Count;
@dynamic authParams, authParams_Count;
@dynamic queryTime;
@dynamic useTokenAuth;
@dynamic clientId;
@dynamic logLevel;
@dynamic tls;
@dynamic restHost;
@dynamic realtimeHost;
@dynamic port;
@dynamic tlsPort;
@dynamic autoConnect;
@dynamic useBinaryProtocol;
@dynamic queueMessages;
@dynamic echoMessages;
@dynamic recover;
@dynamic environment;
@dynamic idempotentRestPublishing;
@dynamic HTTPOpenTimeout;
@dynamic HTTPRequestTimeout;
@dynamic HTTPMaxRetryCount;
@dynamic realtimeRequestTimeout;
@dynamic fallbackHostsArray, fallbackHostsArray_Count;
@dynamic fallbackHostsUseDefault;
@dynamic fallbackRetryTimeout;
@dynamic hasDefaultTokenParams, defaultTokenParams;
@dynamic channelRetryTimeout;
@dynamic transportParams, transportParams_Count;

typedef struct ClientOptions__storage_ {
  uint32_t _has_storage_[2];
  HTTPMethods authMethod;
  int32_t logLevel;
  uint32_t port;
  uint32_t tlsPort;
  uint32_t HTTPOpenTimeout;
  uint32_t HTTPRequestTimeout;
  uint32_t HTTPMaxRetryCount;
  uint32_t realtimeRequestTimeout;
  uint32_t fallbackRetryTimeout;
  uint32_t channelRetryTimeout;
  NSString *authURL;
  NSString *key;
  TokenDetails *tokenDetails;
  NSMutableDictionary *authHeaders;
  NSMutableDictionary *authParams;
  NSString *clientId;
  NSString *restHost;
  NSString *realtimeHost;
  NSString *recover;
  NSString *environment;
  NSMutableArray *fallbackHostsArray;
  TokenParams *defaultTokenParams;
  NSMutableDictionary *transportParams;
} ClientOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authURL",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_AuthURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, authURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authMethod",
        .dataTypeSpecific.enumDescFunc = HTTPMethods_EnumDescriptor,
        .number = ClientOptions_FieldNumber_AuthMethod,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, authMethod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tokenDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenDetails),
        .number = ClientOptions_FieldNumber_TokenDetails,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, tokenDetails),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authHeaders",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_AuthHeaders,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, authHeaders),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authParams",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_AuthParams,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, authParams),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "queryTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_QueryTime,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useTokenAuth",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_UseTokenAuth,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_ClientId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logLevel",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_LogLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, logLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tls",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_Tls,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "restHost",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_RestHost,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, restHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realtimeHost",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_RealtimeHost,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, realtimeHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_Port,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tlsPort",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_TlsPort,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, tlsPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "autoConnect",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_AutoConnect,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useBinaryProtocol",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_UseBinaryProtocol,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "queueMessages",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_QueueMessages,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "echoMessages",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_EchoMessages,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "recover",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_Recover,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, recover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "environment",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_Environment,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, environment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idempotentRestPublishing",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_IdempotentRestPublishing,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "HTTPOpenTimeout",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_HTTPOpenTimeout,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, HTTPOpenTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "HTTPRequestTimeout",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_HTTPRequestTimeout,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, HTTPRequestTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "HTTPMaxRetryCount",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_HTTPMaxRetryCount,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, HTTPMaxRetryCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "realtimeRequestTimeout",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_RealtimeRequestTimeout,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, realtimeRequestTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fallbackHostsArray",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_FallbackHostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, fallbackHostsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fallbackHostsUseDefault",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_FallbackHostsUseDefault,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fallbackRetryTimeout",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_FallbackRetryTimeout,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, fallbackRetryTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "defaultTokenParams",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenParams),
        .number = ClientOptions_FieldNumber_DefaultTokenParams,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, defaultTokenParams),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelRetryTimeout",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_ChannelRetryTimeout,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, channelRetryTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "transportParams",
        .dataTypeSpecific.className = NULL,
        .number = ClientOptions_FieldNumber_TransportParams,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientOptions__storage_, transportParams),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientOptions class]
                                     rootClass:[ClientoptionsRoot class]
                                          file:ClientoptionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientOptions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\033\001\005!!\000\002\n\000\004\014\000\005\013\000\006\n\000\007\t\000\010\014\000\t\010\000\n\010\000\014\010\000\r\014\000\017\007\000\020"
        "\013\000\021\021\000\022\r\000\023\014\000\026\030\000\027!!!,\000\030!!!/\000\031!!!.\000\032\026\000\033\000fal"
        "lbackHosts\000\034\027\000\035\024\000\036\022\000\037\023\000 \017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ClientOptions_AuthMethod_RawValue(ClientOptions *message) {
  GPBDescriptor *descriptor = [ClientOptions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientOptions_FieldNumber_AuthMethod];
  return GPBGetMessageInt32Field(message, field);
}

void SetClientOptions_AuthMethod_RawValue(ClientOptions *message, int32_t value) {
  GPBDescriptor *descriptor = [ClientOptions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientOptions_FieldNumber_AuthMethod];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
