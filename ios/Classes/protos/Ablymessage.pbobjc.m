// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ablymessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Ablymessage.pbobjc.h"
#import "Datatypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AblymessageRoot

@implementation AblymessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AblymessageRoot_FileDescriptor

static GPBFileDescriptor *AblymessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AblyMessage

@implementation AblyMessage

@dynamic registrationHandle;
@dynamic messageType;
@dynamic hasMessage, message;

typedef struct AblyMessage__storage_ {
  uint32_t _has_storage_[1];
  CodecDataType messageType;
  GPBStruct *message;
  int64_t registrationHandle;
} AblyMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "registrationHandle",
        .dataTypeSpecific.className = NULL,
        .number = AblyMessage_FieldNumber_RegistrationHandle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AblyMessage__storage_, registrationHandle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageType",
        .dataTypeSpecific.enumDescFunc = CodecDataType_EnumDescriptor,
        .number = AblyMessage_FieldNumber_MessageType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AblyMessage__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStruct),
        .number = AblyMessage_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AblyMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AblyMessage class]
                                     rootClass:[AblymessageRoot class]
                                          file:AblymessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AblyMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\022\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AblyMessage_MessageType_RawValue(AblyMessage *message) {
  GPBDescriptor *descriptor = [AblyMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AblyMessage_FieldNumber_MessageType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAblyMessage_MessageType_RawValue(AblyMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [AblyMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AblyMessage_FieldNumber_MessageType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
